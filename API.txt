Protocol：
	V0.1
		1.Get the document
		HTTP GET  */get?key=(Key)   
			
			return sentence
			
		2.Set the document
		HTTP POST */store   {"doc":(document)}
			
			return key
			
	V0.2
		1.Get the document by using chinese_key
		HTTP GET  */getbyck?cnkey=(Key)   
		
			return json{"doc":sentence}||0
	
		2.Set the document and return a chinese_key
		HTTP POST */storeck   {"doc":(document)}
			
			return cnkey
	
	V0.3
		1.Check if username exists:
		HTTP GET */check?username=(username)
		"""
		check_result: 

		 1 -> exists,
			  0 -> not exists
		"""
			return check_result
		2.Sign in :
		HTTP POST */signin {"username":(username),"password":(password)}
			return cookies||0
		
		3.login in :
		HTTP POST */login {"username":(username),"password":(password)}
			return cookies||0
		
		4.Get a list of User's doc :
		HTTP POST */list {"cookies":(cookies)}

			return json{"list":[user_doc],"key":[key_list]}||0

		
		5.Add a doc to User's list:
		HTTP POST */storelist {"doc":doc,"cookies":(cookies)}
			return key||0
			
		6.Delete a doc from User's list:
		HTTP POST */delete   {"key":(key)","cookies:(cookies)}
		"""
		if_success:
			1:success
			0:fail
		"""
			return if_success
			
		

Server:
	Environment:
		python3 (http://www.runoob.com/python/python-intro.html)
			-flask (http://flask.pocoo.org/docs/1.0/)
	API:
		
		V0.1
		1.Get the document from database
		get_doc_from_database(key):
			return document
			
		2.Store the document to the datebase
		store_doc_to_database(doc):
			return key
			
		3.Create key:
		create_key():
			return String:key
			
		V0.2
		1.Convert chinese key to hash:
		chinese_key_to_hash(chinese_key):
			return hashkey[:lenth]
			
		2.Conver hash to chinese key:
		hash_to_chinese_key(hash, lenth=5):    
		"""
		lenth means lenth of chinese_key
		"""
			return chinese_key
			
		3.Get full key from part of key :
		part_key_to_full_key(part_key):
			return full_key
			
		4.Store full key and part key
		store_full_key_and_part_key(full_key,part_key):
			
		V0.3
		1.check_user_exist(username):
			return 1||0
		
		2.add_user(username, password):
		    current user
			return cookies||0
		
		3.check_user_password(username,password):
			return cookies||0

		4.get_user_by_cookies(cookies):
			return user_id

		5.get_user_list(user_id):
			return [doclist]
			
		6.add_into_list(user_id, doc):
			return key

		7.delete_form_list(user_id, key):
			return 0||1 
		
		
		To do later 
			1.User system
			
Client:
	API:
	v1.0
	1.Hash password
	Class Hash;
	Use:
		Hash.hash(String password)
		return String hash_result
		
	Class Login
	    login(username,hash(password))
	    return String (0 || cookie)

	   true into next activity

	Class CookieCheck
	  cookie_check(String cookie)
	    return String (json(list)|| 0 )

     function to be done

